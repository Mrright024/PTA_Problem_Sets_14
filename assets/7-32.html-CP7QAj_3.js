import{_ as s,o as n,c as a,b as l}from"./app-3s01Ete_.js";const p={},o=l(`<h1 id="_7-32-说反话-加强版" tabindex="-1"><a class="header-anchor" href="#_7-32-说反话-加强版"><span>7-32 说反话-加强版</span></a></h1><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><h2 id="输入格式" tabindex="-1"><a class="header-anchor" href="#输入格式"><span>输入格式</span></a></h2><p>测试输入包含一个测试用例，在一行内给出总长度不超过500 000的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用若干个空格分开。</p><h2 id="输出格式" tabindex="-1"><a class="header-anchor" href="#输出格式"><span>输出格式</span></a></h2><p>每个测试用例的输出占一行，输出倒序后的句子，并且保证单词间只有1个空格。</p><h2 id="输入样例" tabindex="-1"><a class="header-anchor" href="#输入样例"><span>输入样例</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki nord" style="background-color:#2e3440ff;" tabindex="0"><code><span class="line"><span style="color:#D8DEE9FF;">Hello World   Here I Come</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="输出样例" tabindex="-1"><a class="header-anchor" href="#输出样例"><span>输出样例</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki nord" style="background-color:#2e3440ff;" tabindex="0"><code><span class="line"><span style="color:#D8DEE9FF;">Come I Here World Hello</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="分析与答案" tabindex="-1"><a class="header-anchor" href="#分析与答案"><span>分析与答案</span></a></h2><p>题目给出了总长度，可以采用大数组的形式，但下面的程序依然使用链表的形式处理，为了方便指针的来回移动，这一道题建立的是双向链表，每个节点包含一个字符，一个指向前一节点的指针和一个指向下一节点的指针。</p><p>输入的处理和之前统计字符串单词长度的处理类似，但由于这一道题要求的是单词倒序输出而不是字母倒序输出，输出采取的是以下循环方式（输出前已完成链表处理，单词之间只有一个空格，结尾没有空格）：</p><ol><li>如果已经到达头节点，退出循环；</li><li>如果没有到达头节点，则指向单词结尾的<code>q</code>指针先移动到指向单词开头的<code>p</code>指针的位置（在最开始，<code>p</code>指针位于链表末尾）；</li><li>移动<code>p</code>指针，直到<code>p</code>指针中指向前一节点的指针为空（已经到头节点）或者前一节点储存的是空格，此时<code>p</code>指针已经在单词的开头；</li><li>把链表自己的指针拉到<code>p</code>的位置，<code>p</code>指针开始输出并移动，直到<code>q</code>的位置；</li><li>把<code>p</code>指针拉回到单词开头，如果此时还没有到链表头节点，就把储存的前一节点（必定是空格）输出，并移动到空格之前的节点，进入下一个循环。</li></ol><p>如果只有一个字母，意味着上面的循环一开始就在头节点，会直接退出循环。这种情况可以单独处理，直接输出头结点的字母（测试点中，如果只有空格，输出空格是符合要求的）。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki nord" style="background-color:#2e3440ff;" tabindex="0"><code><span class="line"><span style="color:#5E81AC;font-weight:bold;">#</span><span style="color:#81A1C1;">include</span><span style="color:#8FBCBB;"> </span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">stdio.h</span><span style="color:#ECEFF4;">&gt;</span></span>
<span class="line"><span style="color:#5E81AC;font-weight:bold;">#</span><span style="color:#81A1C1;">include</span><span style="color:#8FBCBB;"> </span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">stdlib.h</span><span style="color:#ECEFF4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">//定义链表节点</span></span>
<span class="line"><span style="color:#81A1C1;">typedef</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> list</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> list </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> pre</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">char</span><span style="color:#D8DEE9FF;"> letter</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">struct</span><span style="color:#D8DEE9FF;"> list </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> next</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;"> str</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">int</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">main</span><span style="color:#ECEFF4;">(){</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    str </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> char_list </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">str</span><span style="color:#81A1C1;">*</span><span style="color:#ECEFF4;">)</span><span style="color:#88C0D0;">malloc</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">sizeof</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">str</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">//头节点完全初始化，只对头节点这样做</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">NULL;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> EOF</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">NULL;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">char</span><span style="color:#D8DEE9FF;"> c</span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;">getchar</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">while</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">c</span><span style="color:#81A1C1;">!=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#EBCB8B;">\\n</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#ECEFF4;">        </span><span style="color:#616E88;">//遇到换行符结束</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">c</span><span style="color:#81A1C1;">!=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;"> </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#ECEFF4;">            </span><span style="color:#616E88;">//非空格非换行符，为字母，塞入节点</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;">EOF</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#ECEFF4;">                </span><span style="color:#616E88;">//头节点，只塞入字符</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> c</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">else</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#ECEFF4;">                </span><span style="color:#616E88;">//非头节点，创建新节点塞入</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">str</span><span style="color:#81A1C1;">*</span><span style="color:#ECEFF4;">)</span><span style="color:#88C0D0;">malloc</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">sizeof</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">str</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> char_list</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                char_list </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> c</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">else</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#81A1C1;">!=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;"> </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&amp;&amp;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">!=NULL</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#ECEFF4;">                </span><span style="color:#616E88;">//现节点不是空格，也不是第一个节点，创建新节点插入一个空格</span></span>
<span class="line"><span style="color:#ECEFF4;">                </span><span style="color:#616E88;">//如果先节点是空格，或者是第一个节点，那就什么都不做</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">str</span><span style="color:#81A1C1;">*</span><span style="color:#ECEFF4;">)</span><span style="color:#88C0D0;">malloc</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">sizeof</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">str</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> char_list</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                char_list </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> c</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">        </span><span style="color:#616E88;">//读取下一个字符</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        c</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#88C0D0;">getchar</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">//如果结尾有空格，删掉最后一个节点</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;"> </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        str </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">tmp </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> char_list</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        char_list </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">free</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">tmp</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">//最后一个字母的next指针置空</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#D8DEE9;">char_list</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">NULL;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    str </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">p </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> char_list</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;">q</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">while</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">==NULL</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">            </span><span style="color:#616E88;">//已经到头节点，结束循环</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#81A1C1;">break;</span></span>
<span class="line"><span style="color:#ECEFF4;">        </span><span style="color:#616E88;">//q指针拉上来</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        q </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> p</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">while</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">!=NULL</span><span style="color:#D8DEE9FF;"> </span><span style="color:#81A1C1;">&amp;&amp;</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#81A1C1;">!=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;"> </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">            </span><span style="color:#616E88;">//到头节点或者到空格前停下</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            p </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">        </span><span style="color:#616E88;">//char_list指针拉上来</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        char_list </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> p</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">while</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">p </span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;"> q</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#88C0D0;">printf</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%c</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            p </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">        </span><span style="color:#616E88;">//打完最后一个字母</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">printf</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%c</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">        </span><span style="color:#616E88;">//p指针拉上来</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        p </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> char_list</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">!=NULL</span><span style="color:#ECEFF4;">){</span></span>
<span class="line"><span style="color:#ECEFF4;">            </span><span style="color:#616E88;">//p还没到头节点，打空格</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            p </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            </span><span style="color:#88C0D0;">printf</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%c</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            p </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> </span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">pre</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">    </span><span style="color:#616E88;">//如果只有一个字母</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">next</span><span style="color:#81A1C1;">==NULL&amp;&amp;</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#81A1C1;">!=</span><span style="color:#D8DEE9FF;">EOF</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span><span style="color:#88C0D0;">printf</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">%c</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">-&gt;</span><span style="color:#D8DEE9;">letter</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> </span><span style="color:#B48EAD;">0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://picb.waku.icu/picb/2024/05/14/202405141503419.png" alt="7-32 测试点"></p>`,17),e=[o];function c(t,r){return n(),a("div",null,e)}const i=s(p,[["render",c],["__file","7-32.html.vue"]]),y=JSON.parse('{"path":"/program/7-32.html","title":"7-32 说反话-加强版","lang":"zh-CN","frontmatter":{"description":"7-32 说反话-加强版 给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。 输入格式 测试输入包含一个测试用例，在一行内给出总长度不超过500 000的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用若干个空格分开。 输出格式 每个测试用例的输出占一行，输出倒序后的句子，并且保证单词间只有...","head":[["meta",{"property":"og:url","content":"https://mrright024.github.io//PTA_Problem_Sets_14/PTA_Problem_Sets_14/program/7-32.html"}],["meta",{"property":"og:site_name","content":"PTA Problem Sets 14"}],["meta",{"property":"og:title","content":"7-32 说反话-加强版"}],["meta",{"property":"og:description","content":"7-32 说反话-加强版 给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。 输入格式 测试输入包含一个测试用例，在一行内给出总长度不超过500 000的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用若干个空格分开。 输出格式 每个测试用例的输出占一行，输出倒序后的句子，并且保证单词间只有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://picb.waku.icu/picb/2024/05/14/202405141503419.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T08:42:49.000Z"}],["meta",{"property":"article:author","content":"William Kong"}],["meta",{"property":"article:modified_time","content":"2024-05-14T08:42:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7-32 说反话-加强版\\",\\"image\\":[\\"https://picb.waku.icu/picb/2024/05/14/202405141503419.png\\"],\\"dateModified\\":\\"2024-05-14T08:42:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"William Kong\\",\\"url\\":\\"https://williamkong.xyz\\",\\"email\\":\\"admin@williamkong.xyz\\"}]}"]]},"headers":[{"level":2,"title":"输入格式","slug":"输入格式","link":"#输入格式","children":[]},{"level":2,"title":"输出格式","slug":"输出格式","link":"#输出格式","children":[]},{"level":2,"title":"输入样例","slug":"输入样例","link":"#输入样例","children":[]},{"level":2,"title":"输出样例","slug":"输出样例","link":"#输出样例","children":[]},{"level":2,"title":"分析与答案","slug":"分析与答案","link":"#分析与答案","children":[]}],"git":{"updatedTime":1715676169000,"contributors":[{"name":"William Kong","email":"37934615+Mrright024@users.noreply.github.com","commits":3}]},"filePathRelative":"program/7-32.md","autoDesc":true}');export{i as comp,y as data};
